@startuml
box Main
Participant ":Duke" as Duke
end box
box Parser
Participant ":Parser" as Parser
end box
box AddModuleCommand
Participant ":AddModuleCommand" as AddModuleCommand
end box
box Ui
Participant ":Ui" as Ui
end box
box State
Participant ":State" as State
end box
box Storage
Participant ":Storage" as Storage
end box
box Module
Participant ":SelectedModule" as SelectedModule
end box


activate Duke
group loop [!isExit]
Duke -> Ui : readNext()
activate Ui
Ui --> Duke
deactivate Ui
Duke -> Parser : parse()
activate Parser
create AddModuleCommand
Parser -> AddModuleCommand : new AddModuleCommand()
activate AddModuleCommand
AddModuleCommand --> Parser
deactivate AddModuleCommand
Parser --> Duke
deactivate Parser
Duke -> AddModuleCommand : execute()
activate AddModuleCommand
AddModuleCommand -> State : getSemester()
activate State
State --> AddModuleCommand
deactivate State
AddModuleCommand -> SelectedModule : selectedModule()
activate SelectedModule
SelectedModule --> AddModuleCommand
deactivate SelectedModule
AddModuleCommand -> State : getSelectedModulesList()
activate State
State --> AddModuleCommand
deactivate State
AddModuleCommand -> State : addSelectedModule()
activate State
State --> AddModuleCommand
deactivate State

alt successful case

    AddModuleCommand -> Ui: addMesasge()
    activate Ui

else not successful

    AddModuleCommand -> Ui: addMessage()
    deactivate Ui
end

AddModuleCommand -> Ui :displayUi()
Ui --> AddModuleCommand :

AddModuleCommand --> Duke
deactivate AddModuleCommand
destroy AddModuleCommand
end

Duke -> Storage : saveState()
activate Storage
Storage --> Duke
deactivate Storage

@enduml